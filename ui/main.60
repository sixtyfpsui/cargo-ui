/* Copyright ¬© 2021 SixtyFPS GmbH <info@sixtyfps.info>
 * SPDX-License-Identifier: MIT OR Apache-2.0
 */

import {ComboBox, VerticalBox, HorizontalBox, GridBox, Button, LineEdit, ListView} from "sixtyfps_widgets.60";

struct Diag := {
    short: string,
    expanded: string,
    level: int, // 0 = other, 1 = error, 2 = warning, 3 = note

}

struct Action := {
    command: string,
    package: string,
    profile: string,
    extra: string, // bin or test name
}

Pane := Rectangle {
    // capture all clicks
    TouchArea {}
}

BuildingPane := Pane {
    callback cancel <=> cancel_btn.clicked;
    callback back <=> back_btn.clicked;
    property <bool> is_building;
    property status <=> status_text.text;
    property <[Diag]> diagnostics: [
        // just some placeholder for testing
        {short: "Hallo", expanded: "Hello\nworld", level: 1 },
        {short: "Hallo", expanded: "Hello\nworld", level: 2 },
        {short: "Hallo", expanded: "Hello\nworld", level: 3 },
        {short: "Hallo", expanded: "Hello\nworld", level: 0 }
    ];

    VerticalBox {
        status_text := Text { }

        ListView {
            viewport_width: width;
            for diagnostic in diagnostics : TouchArea {
                property<bool> expanded;
                clicked => { expanded = !expanded }
                enabled: diagnostic.expanded != "";
                animate height { duration: 150ms; easing: ease; }
                height: b.preferred_height;
                b := HorizontalBox {
                    if (enabled) : Text {
                        text: !expanded ? "‚ñ∂": "‚ñº";
                    }
                    Text {
                        horizontal_stretch: 1;
                        color: {
                            diagnostic.level == 1 ? #a44 :
                            diagnostic.level == 2 ? #aa4 :
                            diagnostic.level == 3 ? #44a :
                            #444;
                        };
                        property <string> level_txt: {
                            diagnostic.level == 1 ? "error: " :
                            diagnostic.level == 2 ? "warning: " :
                            diagnostic.level == 3 ? "info: " :
                            "";
                        }
                        text: !expanded ? (level_txt + diagnostic.short) : diagnostic.expanded;
                        wrap: word_wrap;

                    }
                }
            }
        }
        HorizontalBox {
            alignment: space_between;
            cancel_btn := Button {
                enabled: is_building;
                text: "‚ùå Cancel";
                height: min_height;
            }
            back_btn := Button {
                enabled: !is_building;
                text: "üîô Back";
                height: min_height;
            }

        }
    }
}

struct DependencyNode := {
    text: string,
    indentation: int,
    has_children: bool,
    open: bool,
}

DepTreePane := Pane {
    callback back <=> back_btn.clicked;

    property <[DependencyNode]> model;

    VerticalBox {
        ListView {
            for dep in model : HorizontalLayout {
                height: preferred_height; // FIXME: workaround bug fixed in sixtyfps 0.1.1
                Rectangle { width: dep.indentation * 15px; }
                Text {
                    text: !dep.has_children ? "" : dep.open ? "[-]" : "[+]";
                    width: 30px;
                    TouchArea {
                        clicked => { dep.open = !dep.open; }
                    }
                }
                Text { text: dep.text; }
            }
        }
        HorizontalBox {
            alignment: end;
            back_btn:=Button {
                text: "üîô Back";
            }
        }
    }
}

/*
Debug_DepTreePane := Window {
    title: "Cargo UI";
    preferred_height: 500px;
    preferred_width: 300px;
    DepTreePane{
        model: [
        { text: "AAA", indentation: 0, has_children: true, open: true },
        { text: "BBB", indentation: 1, has_children: false, open: false, },
        { text: "CCC", indentation: 1, has_children: false, open: false, },
        { text: "DDD", indentation: 1, has_children: true , open: true, },
        { text: "EEE", indentation: 2, has_children: true , open: false, },
        { text: "FFF", indentation: 1, has_children: false , open: false, },

    ];
    }
}
*/

CargoUI := Window {
    title: "Cargo UI";
    preferred_height: 500px;
    preferred_width: 300px;

    property <string> status: "Cargo UI";
    property <[string]> packages;
    property <bool> allow_package_selection: false;
    property <string> current_package;
    property <[string]> extra_run;
    property <[string]> extra_test;
    property <bool> has_extra_tests : true; // Remove, once we can query the length of models in .60
    callback action(Action);
    callback cancel;
    property <bool> is_building : false;
    property <[Diag]> diagnostics;
    property <bool> workspace_valid : true;
    property <string> manifest_path <=> le_manifest.text;
    property <string> build_results <=> build_results_label.text;
    property <string> check_results <=> check_results_label.text;
    callback reload_manifest(string);
    callback show_open_dialog;
    property <bool> build_pane_visible;
    property <bool> deptree_pane_visible;
    property <[DependencyNode]> deptree;

    // required because of a bug in sixtyfps 0.1.0 (fixed by e633ee82)
    property <Action> ignore_me;

    GridBox {
        Row {
            Text { text: "Manifest:"; vertical-alignment: center; horizontal-alignment: right; }
            HorizontalLayout {
                colspan: 3;
                le_manifest := LineEdit {
                    accepted => { root.reload_manifest(le_manifest.text); }
                    horizontal_stretch: 1;
                }
                open_button := Button {
                    text: "üìÇ";
                    clicked => { root.show_open_dialog(); }
                }
            }
        }

        Row {
            HorizontalLayout {
                if (allow_package_selection): Text {
                    text: "Package:"; vertical-alignment: center; horizontal-alignment: right;
                }            
            }
            HorizontalLayout {
                if (allow_package_selection): ComboBox {
                    model: packages;
                    enabled: root.workspace_valid;
                    // required because of bug in sixtyfps 0.1.0 (fixed by ee5386)
                    min-height: open_button.min-height;
                    current_value <=> current_package;
                }
            }
            Text { text: "Profile: "; vertical-alignment: center; horizontal-alignment: right; }
            mode_cb := ComboBox {
                current_value: "debug";
                model: ["debug", "release"];
                enabled: root.workspace_valid;
            }
            //Text { text: "Toolchain: "; }
            //profile_cb := ComboBox { model: ["stable", "nightly"]; }
        }

        Row {
            Rectangle { height: 40px; }
        }


        Row {
            Button {
                text: "üöÄ Run";
                enabled: root.workspace_valid;
                clicked => {
                    build_pane_visible = true;
                    action({
                        command: "run",
                        package: current_package,
                        profile: mode_cb.current_value,
                        extra: bin_cb.current_value
                    });
                }
            }
            bin_cb := ComboBox {
                model: extra_run;
                enabled: root.workspace_valid;
            }
        }

        Row {
            Button {
                text: "üèóÔ∏è Build";
                enabled: root.workspace_valid;
                clicked => {
                    build_pane_visible = true;
                    action({
                        command: "build",
                        package: current_package,
                        profile: mode_cb.current_value,
                        extra: ""
                    });
                }
            }
            build_results_label := Text {
                vertical-alignment: center;
            }
        }

        Row {
            Button {
                text: "üëç Check";
                enabled: root.workspace_valid;
                clicked => {
                    build_pane_visible = true;
                    action({
                        command: "check",
                        package: current_package,
                        profile: mode_cb.current_value,
                        extra: ""
                    });
                }
            }
            check_results_label := Text {
                vertical-alignment: center;
            }
        }

        Row {
            Button {
                text: "üß™ Test";
                enabled: root.workspace_valid;
                clicked => {
                    build_pane_visible = true;
                    action({
                        command: "test",
                        package: current_package,
                        profile: mode_cb.current_value,
                        extra: test_cb.current_value,
                    });
                }
            }
            test_cb := ComboBox {
                model: extra_test;
                enabled: root.workspace_valid && root.has_extra_tests;
            }
        }

        Row {
            Button {
                colspan: 2;
                text: "üå≥ Show Dependencies";
                clicked => { deptree_pane_visible = true; }
            }
        }

        Row {
            Rectangle { min-height: 40px; }
        }

        Text {
            colspan: 3;
            text: status;
            wrap: word_wrap;
            overflow: elide;
        }

        deptree := Rectangle {
            row: 2;
            colspan: 4;
            rowspan: 7;
            property <float> animate_opacity: deptree_pane_visible ? 1 : 0;
            animate animate_opacity { duration: 250ms; easing: ease; }

            if (deptree.animate_opacity > 0.01) : DepTreePane {
                model: root.deptree;
                background: root.background;
                opacity: parent.animate_opacity;
                back => { deptree_pane_visible = false; }
            }
        }
    }



    animated := Rectangle {
        width: 100%; height: 100%;
        y: parent.height;
        states [
            visible when (is_building || build_pane_visible) : {
                y: 0;
            }
        ]
        transitions [
            in visible : {
                animate y { duration: 200ms; easing: ease; }
            }
            out visible : {
                animate y { duration: 200ms; easing: ease; }
            }
        ]
        if (animated.y < root.height): BuildingPane {
            background: root.background;
            status: root.status;
            diagnostics: root.diagnostics;
            cancel => { root.cancel() }
            back => { build_pane_visible = false; }
            is_building: root.is_building;
        }
    }
}