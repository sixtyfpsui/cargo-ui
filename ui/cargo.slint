/* Copyright ¬© SixtyFPS GmbH <info@slint-ui.com>
 * SPDX-License-Identifier: MIT OR Apache-2.0
 */

import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox
} from "std-widgets.slint";

import { CratesCompletionData } from "crates_completion.slint";

export struct Diag  {
    short: string,
    expanded: string,
    level: int, // 0 = other, 1 = error, 2 = warning, 3 = note

}

export struct Action  {
    command: string,
    package: string,
    profile: string,
    extra: string, // bin or test name
    arguments: string,
}

component Pane inherits Rectangle {
    // capture all clicks
    TouchArea {}
}

export component BuildingPane inherits Pane {
    callback cancel <=> cancel_btn.clicked;
    callback back <=> back_btn.clicked;
    in-out property <bool> is-building;
    in-out property status <=> status_text.text;
    in-out property <[Diag]> diagnostics;

    VerticalBox {
        status_text := Text { }

        ListView {
            viewport_width: self.width;
            for diagnostic in root.diagnostics : ta := TouchArea {
                property<bool> expanded;
                clicked => { self.expanded = !self.expanded }
                enabled: diagnostic.expanded != "";
                animate height { duration: 150ms; easing: ease; }
                height: b.preferred_height;
                b := HorizontalBox {
                    if (ta.enabled) : Text {
                        text: !expanded ? "‚ñ∂": "‚ñº";
                    }
                    Text {
                        horizontal_stretch: 1;
                        property <string> level_txt;
                        text: !expanded ? (self.level_txt + diagnostic.short) : diagnostic.expanded;
                        wrap: word_wrap;

                        states [
                            error when diagnostic.level == 1: {
                                color: #a44;
                                level_txt: "error: ";
                            }
                            warning when diagnostic.level == 2: {
                                color: #aa4;
                                level_txt: "warning: ";
                            }
                            info when diagnostic.level == 3: {
                                color: #44a;
                                level_txt: "info: ";
                            }
                        ]
                    }
                }
            }
        }
        HorizontalBox {
            alignment: space_between;
            cancel_btn := Button {
                enabled: root.is-building;
                text: "‚ùå Cancel";
                height: self.min_height;
            }
            back_btn := Button {
                enabled: !root.is-building;
                text: "üîô Back";
                height: self.min_height;
            }

        }
    }
}

export struct DependencyNode  {
    crate_name: string,
    version: string,
    duplicated: bool,
    outdated: bool,
    dep_kind: string,
    indentation: int,
    has_children: bool,
    open: bool,
    parent_package: string,
}

export global DependencyData  {
    in-out property <[DependencyNode]> model;
    // the parameter is the parent_package and the crate_name, and the dependency type
    callback request_upgrade(string, string, string);
    // the parameter is the parent_package and the crate_name, and the dependency type
    callback remove(string, string, string);
    // crate name, and dependency type
    callback add_dependency(string, string);
    // whether the "add dependency" field should be enabled
    in-out property <bool> package-selected : true;
}

component DepTreePane inherits Pane {
    callback back <=> back_btn.clicked;

    in-out property <[DependencyNode]> model: DependencyData.model;
    in-out property <bool> completion_shown;

    GridBox {
        Row {
            Rectangle {
                z: 1; // put on top because of the completion
                horizontal-stretch: 1;
                install-le := LineEdit {
                    width: 100%;
                    enabled: DependencyData.package-selected;
                    placeholder-text: DependencyData.package-selected ? "Dependency to add" : "Select a package to add a dependency";
                    accepted(text) => {
                        DependencyData.add-dependency(install-le.text, "");
                        self.text = "";
                        root.completion_shown = false;
                    }
                    edited => {
                        CratesCompletionData.update_completion(self.text);
                        root.completion_shown = self.text != "";
                    }
                }
                if root.completion_shown && CratesCompletionData.completions.length > 0 : Rectangle {
                    background: white;
                    y: parent.height + 6px;
                    height: min(root.height - install-le.y - install-le.height - 12px, inner_layout.preferred-height);
                    drop-shadow-color: #8888;
                    drop-shadow-offset-x: 1px;
                    drop-shadow-offset-y: 1px;
                    drop-shadow-blur: 5px;
                    border-radius: 5px;
                    clip: true;
                    inner_layout := VerticalBox {
                        width: 100%;
                        alignment: end;
                        for crate in CratesCompletionData.completions: Rectangle {
                            background: inner-touch.has-hover ? lightgray : transparent;
                            height: inner_text.height;
                            inner_text := Text {
                                y:0;
                                width: 100%;
                                text: crate;
                                color: black;
                                overflow: elide;
                            }
                            inner_touch := TouchArea {
                                clicked => {
                                    install-le.text = crate;
                                    root.completion_shown = false;
                                }
                            }
                        }
                    }
                }
            }
            Button {
                text: "‚ûï Add";
                clicked => {
                    DependencyData.add-dependency(install-le.text, "");
                    install-le.text = "";
                    root.completion_shown = false;
                }
            }
        }
        ListView {
            colspan: 2;
            horizontal-stretch: 1;
            for dep in root.model : HorizontalLayout {
                width: self.preferred-width;
                spacing: 5px;
                Rectangle { width: dep.indentation * 20px; }
                Text {
                    text: !dep.has_children ? "" : dep.open ? "‚äü" : "‚äû";
                    horizontal-alignment: right;
                    vertical-alignment: center;
                    width: 20px;
                    TouchArea {
                        clicked => { dep.open = !dep.open; }
                    }
                }
                crate_name := Text {
                    text: dep.crate_name;
                    vertical-alignment: center;
                }
                Text {
                    text: dep.version;
                    color: dep.outdated ? red : crate_name.color;
                    vertical-alignment: center;
                }
                if (dep.dep_kind != "") : Text {
                    text: " (\{dep.dep_kind})";
                    color: gray;
                    vertical-alignment: center;
                }
                if (dep.duplicated) : Text {
                    text: "(duplicated)";
                    vertical-alignment: center;
                }
                if (dep.outdated && dep.indentation == 1) : Button {
                    clicked => { DependencyData.request_upgrade(dep.parent_package, dep.crate_name, dep.dep_kind); }
                    text: "üîÑ Upgrade";
                    min-height: crate_name.preferred_height * 1.25;
                }
                if (dep.indentation == 1) : Button {
                    clicked => { DependencyData.remove(dep.parent_package, dep.crate_name, dep.dep_kind); }
                    text: "üóëÔ∏è Remove";
                    min-height: crate_name.preferred_height * 1.25;
                }
            }
        }
        Row {
            back_btn:=Button {
                col: 1;
                text: "üîô Back";
            }
        }
    }
}


/*
Debug_DepTreePane := Window {
    title: "Cargo UI";
    preferred_height: 500px;
    preferred_width: 300px;
    DepTreePane{
        model: [
        { crate_name: "AAA", version: "0.1", indentation: 0, has_children: true, open: true },
        { crate_name: "BBB", version: "0.1", indentation: 1, has_children: false, open: false, },
        { crate_name: "CCC", version: "0.1", indentation: 1, has_children: false, open: false, outdated: true, },
        { crate_name: "DDD", version: "0.1", indentation: 1, has_children: true , open: true, },
        { crate_name: "EEE", version: "0.1", indentation: 2, has_children: true , open: false, },
        { crate_name: "FFF", version: "0.1", indentation: 1, has_children: false , open: false, },

    ];
    }
}
*/

export struct Feature  {
    name: string,
    enabled: bool,
    enabled_by_default: bool,
}

export component CargoView inherits GridBox {
    // Public properties
    in-out property <string> status: "Cargo UI";
    in-out property <[string]> packages;
    in-out property <bool> allow-package-selection: false;
    in-out property <string> current-package:"";
    in-out property <[string]> extra-run;
    in-out property <[string]> extra-test;
    callback action(Action);
    callback cancel;
    in-out property <bool> is-building : false;
    in-out property <[Diag]> diagnostics;
    in-out property <bool> workspace-valid : true;
    in-out property <string> manifest-path <=> le_manifest.text;
    in-out property <string> build-results <=> build-results-label.text;
    in-out property <string> check-results <=> check-results-label.text;
    callback reload-manifest(string);
    callback show-open-dialog;
    in-out property <bool> build-pane-visible;
    in-out property <[DependencyNode]> deptree;
    in-out property <bool> has-features;
    in-out property <[Feature]> package-features;
    in-out property <bool> enable-default-features;
    callback package-selected(string);

    in-out property <brush> background;

    // Private properties
    in-out property <bool> deptree-pane-visible;

    Row {
        Text { text: "Manifest:"; vertical-alignment: center; horizontal-alignment: right; }
        HorizontalLayout {
            colspan: 3;
            le_manifest := LineEdit {
                enabled: !root.deptree-pane-visible;
                accepted => { root.reload-manifest(le_manifest.text); }
                horizontal_stretch: 1;
            }
            open_button := Button {
                enabled: !root.deptree-pane-visible;
                text: "üìÇ";
                clicked => { root.show-open-dialog(); }
            }
        }
    }

    Row {
        HorizontalLayout {
            if root.allow-package-selection: Text {
                text: "Package:"; vertical-alignment: center; horizontal-alignment: right;
            }
        }
        HorizontalLayout {
            if root.allow-package-selection: ComboBox {
                enabled: !root.deptree-pane-visible && root.workspace-valid;
                model: root.packages;
                current_value <=> root.current-package;
                selected(pkg) => { root.package-selected(pkg); }
            }
        }
        Text { text: "Profile: "; vertical-alignment: center; horizontal-alignment: right; }
        mode_cb := ComboBox {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            current_value: "debug";
            model: ["debug", "release"];
        }
        //Text { text: "Toolchain: "; }
        //profile_cb := ComboBox { model: ["stable", "nightly"]; }
    }

    Row {
        Rectangle { height: 40px; }
    }

    Row {
        Button {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            text: "üöÄ Run";
            clicked => {
                root.build-pane-visible = true;
                root.action({
                    command: "run",
                    package: root.current-package,
                    profile: mode_cb.current_value,
                    extra: bin_cb.current_value,
                    arguments: arguments-le.text,
                });
            }
        }
        bin_cb := ComboBox {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            model: root.extra-run;
        }
    }
    Row {
        arguments-le := LineEdit {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            colspan: 2;
            placeholder-text: "Command line arguments";
        }
    }

    Row {
        Button {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            text: "üèóÔ∏è Build";
            clicked => {
                root.build-pane-visible = true;
                root.action({
                    command: "build",
                    package: root.current-package,
                    profile: mode_cb.current_value,
                    extra: ""
                });
            }
        }
        build-results-label := Text {
            vertical-alignment: center;
        }
    }

    Row {
        Button {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            text: "üëç Check";
            clicked => {
                root.build-pane-visible = true;
                root.action({
                    command: "check",
                    package: root.current-package,
                    profile: mode_cb.current_value,
                    extra: ""
                });
            }
        }
        check-results-label := Text {
            vertical-alignment: center;
        }
    }

    Row {
        Button {
            enabled: !root.deptree-pane-visible && root.workspace-valid;
            text: "üß™ Test";
            clicked => {
                root.build-pane-visible = true;
                root.action({
                    command: "test",
                    package: root.current-package,
                    profile: mode_cb.current_value,
                    extra: test_cb.current_value,
                });
            }
        }
        test_cb := ComboBox {
            model: root.extra-test;
            enabled: !root.deptree-pane-visible && root.workspace-valid && root.extra-test.length > 0;
        }
    }

    Row {
        Button {
            enabled: !root.deptree-pane-visible;
            colspan: 2;
            text: "üå≥ Show Dependencies";
            clicked => { root.deptree-pane-visible = true; }
        }
    }

    Row {
        Rectangle { min-height: 40px; }
    }

    Text {
        colspan: 4;
        text: root.status;
        wrap: word_wrap;
        overflow: elide;
    }

    GroupBox {
        row: 3;
        col: 2;
        rowspan: 7;
        colspan: 2;
        title: "Features";
        VerticalBox {
            CheckBox {
                enabled: !root.deptree-pane-visible;
                text: "Enable Default Features";
                checked <=> root.enable-default-features;
            }
            if root.has-features: ListView {
                for feature in root.package-features:  HorizontalLayout {
                    CheckBox {
                        enabled: !root.deptree-pane-visible && (!feature.enabled_by_default || !root.enable-default-features);
                        text: feature.name + (!self.enabled ? " (enabled by default)" : "");
                        checked: feature.enabled;
                        toggled => {
                            feature.enabled = self.checked;
                        }
                    }
                }
            }
            if !root.has-features: Rectangle {
                // helper rectangle to ensure that the CheckBox is aligned to the top.
            }
        }
    }


    deptree := Rectangle {
        row: 2;
        colspan: 4;
        rowspan: 8;
        property <float> animate_opacity: root.deptree-pane-visible ? 1 : 0;
        animate animate_opacity { duration: 250ms; easing: ease; }

        if (deptree.animate_opacity > 0.01) : DepTreePane {
                        background: root.background;
            opacity: parent.animate_opacity;
            back => { root.deptree-pane-visible = false; }
        }
    }
}
